{"version":3,"file":"static/js/797.27d8fdc5.chunk.js","mappings":"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","sources":["components/Login/Login.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport {\r\n  useGetCaptchaUrlQuery,\r\n  useLoginMutation,\r\n  useMeQuery,\r\n} from \"../../api/apiSlice\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst Login = () => {\r\n  const me = useMeQuery(undefined, {\r\n    selectFromResult: ({ data }) => ({\r\n      me: data.data,\r\n    }),\r\n  });  \r\n\r\n  const loginSchema = yup.object().shape({\r\n    email: yup\r\n      .string(\"email should be a string\")\r\n      .email(\"please provide a valid email address\")\r\n      .required(\"email address is required\"),\r\n    password: yup\r\n      .string(\"password should be a string\")\r\n      .min(5, \"password should have a minimum length of 5\")\r\n      .max(12, \"password should have a maximum length of 12\")\r\n      .required(\"password is required\"),\r\n    captcha: yup.string().required(\"captcha is required\"),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(loginSchema),\r\n  });\r\n\r\n  const { data } = useGetCaptchaUrlQuery();\r\n\r\n  const [sendLogin] = useLoginMutation();\r\n\r\n  const formSubmitHandler = (formData) => {\r\n    let body = {\r\n      email: formData.email,\r\n      password: formData.password,\r\n      rememberMe: formData.rememberMe,\r\n      captcha: formData.captcha,\r\n    };\r\n    sendLogin(body).unwrap();\r\n  };\r\n\r\n  if (me.me.id) {\r\n    return <Navigate to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <form onSubmit={handleSubmit(formSubmitHandler)}>\r\n        <div>\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            {...register(\"email\")}\r\n            name=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"Email\"\r\n          />\r\n          {errors.email ? <span>{errors.email.message}</span> : <></>}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            {...register(\"password\")}\r\n            name=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Password\"\r\n            type={\"password\"}\r\n          />\r\n          {errors.password ? <span>{errors.password.message}</span> : <></>}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"rememberMe\">Remember me</label>\r\n          <input\r\n            {...register(\"rememberMe\")}\r\n            name=\"rememberMe\"\r\n            id=\"rememberMe\"\r\n            type={\"checkbox\"}\r\n          />\r\n        </div>\r\n        {data && (\r\n          <div>\r\n            <img src={data.url} alt=\"Captcha\"/>\r\n            <input\r\n              {...register(\"captcha\")}\r\n              name=\"captcha\"\r\n              id=\"captcha\"\r\n              placeholder=\"Symbols from image\"\r\n            />\r\n            {errors.captcha ? <span>{errors.captcha.message}</span> : <></>}\r\n          </div>\r\n        )}\r\n        <div>\r\n          <button type=\"submit\">Login</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["me","useMeQuery","undefined","selectFromResult","_ref","data","loginSchema","yup","shape","email","required","password","min","max","captcha","_useForm","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","useGetCaptchaUrlQuery","_useLoginMutation","useLoginMutation","sendLogin","_slicedToArray","id","_jsx","Navigate","to","_jsxs","children","onSubmit","formData","body","rememberMe","unwrap","htmlFor","_objectSpread","name","placeholder","message","_Fragment","type","src","url","alt"],"sourceRoot":""}