{"version":3,"file":"static/js/873.4af82376.chunk.js","mappings":"+NAMMA,EAAK,IAAIC,UACb,gEAGIC,EAAU,SAAHC,GAAqB,IAAfC,EAAOD,EAAPC,QACjB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACFF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEC,EAAG,EAAGC,GAAG,EAAGC,QAAS,OAAQC,WAAY,SAASL,SAAA,EAC3DM,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,IAAKX,EAAQY,SACbC,IAAKb,EAAQc,MACbC,QAAQ,SACRC,UAAWC,EAAAA,GAEXC,GAAI,YAAclB,EAAQmB,OAC1Bf,GAAI,CACFgB,MAAO,CAAEC,GAAI,GAAIC,GAAI,KACrBC,OAAQ,CAAEF,GAAI,GAAIC,GAAI,KACtBE,GAAG,IALAxB,EAAQmB,SAQfV,EAAAA,EAAAA,KAACgB,EAAAA,EAAU,CAAAtB,SAAEH,EAAQA,cAEvBS,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,MAGd,EA+CA,UA7CgB,WACd,IAAAC,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAAoCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAC1BG,GAAYC,EAAAA,EAAAA,QAAO,OACzBC,EAAAA,EAAAA,YAAU,WACR3C,EAAG4C,iBAAiB,WAAW,SAACC,GAC9B,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/Bb,GAAY,SAACc,GAAY,SAAAC,QAAAC,EAAAA,EAAAA,GAASF,IAAYE,EAAAA,EAAAA,GAAKN,GAAW,GAChE,IACIL,EAAUY,SACZZ,EAAUY,QAAQC,eAAe,CAAEC,UAAW,UAElD,GAAG,CAACpB,IAUJ,OACE9B,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEC,EAAG,EAAGE,QAAS,OAAQ6C,cAAe,SAAUC,SAAS,KAAMlD,SAAA,EACxEF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEmB,OAAQ,QAAS+B,UAAW,OAAQD,SAAU,GAAIlD,SAAA,CAC1D4B,EAASwB,KAAI,SAAClD,GAAC,OACdI,EAAAA,EAAAA,KAACX,EAAO,CAACE,QAASK,GAAK,KAEzBI,EAAAA,EAAAA,KAACP,EAAAA,EAAG,CAACsD,IAAKnB,QAEZpC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEG,QAAS,OAAQC,WAAY,UAAWL,SAAA,EACjDM,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CACRC,GAAG,iBACHC,MAAM,UACN5C,QAAQ,WACR6C,MAAOzB,EACP0B,SAAU,SAACpB,GAAC,OAAKL,EAAcK,EAAEqB,OAAOF,MAAM,KAEhDnD,EAAAA,EAAAA,KAACsD,EAAAA,EAAM,CAAC3D,GAAI,CAAEC,EAAG,GAAK2D,QAxBD,WACpB7B,IAGLvC,EAAGqE,KAAK9B,GACRC,EAAc,IAChB,EAkByDrB,QAAQ,WAAUZ,SAAC,sBAM9E,C","sources":["components/Dialogs/Dialogs.jsx"],"sourcesContent":["import { Avatar, Box, Divider, Typography } from \"@mui/material\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ws = new WebSocket(\r\n  \"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\"\r\n);\r\n\r\nconst Message = ({ message }) => {\r\n  return (\r\n    <Box>\r\n      <Box sx={{ m: 1, mt:2, display: \"flex\", alignItems: \"start\"}}>\r\n        <Avatar\r\n          alt={message.userName}\r\n          src={message.photo}\r\n          variant=\"square\"\r\n          component={Link}\r\n          key={message.userId}\r\n          to={`/profile/` + message.userId}\r\n          sx={{\r\n            width: { xs: 80, sm: 100},\r\n            height: { xs: 80, sm: 100 },\r\n            mr:2\r\n          }}\r\n        />\r\n        <Typography>{message.message}</Typography>\r\n      </Box>\r\n      <Divider />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Dialogs = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const scrollRef = useRef(null);\r\n  useEffect(() => {\r\n    ws.addEventListener(\"message\", (e) => {\r\n      let newMessages = JSON.parse(e.data);\r\n      setMessages((prevMessages) => [...prevMessages, ...newMessages]);\r\n    });\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollIntoView({ behaviour: \"smooth\" });\r\n    }\r\n  }, [messages]);\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!newMessage) {\r\n      return;\r\n    }\r\n    ws.send(newMessage);\r\n    setNewMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ m: 2, display: \"flex\", flexDirection: \"column\", flexGrow:\"1\" }}>\r\n      <Box sx={{ height: \"400px\", overflowY: \"auto\", flexGrow: 1 }}>\r\n        {messages.map((m) => (\r\n          <Message message={m} />\r\n        ))}\r\n        <Box ref={scrollRef} />\r\n      </Box>\r\n      <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"Message\"\r\n          variant=\"outlined\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n        />\r\n        <Button sx={{ m: 1 }} onClick={sendMessageHandler} variant=\"outlined\">\r\n          Send message\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default Dialogs;\r\n"],"names":["ws","WebSocket","Message","_ref","message","_jsxs","Box","children","sx","m","mt","display","alignItems","_jsx","Avatar","alt","userName","src","photo","variant","component","Link","to","userId","width","xs","sm","height","mr","Typography","Divider","_useState","useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","newMessage","setNewMessage","scrollRef","useRef","useEffect","addEventListener","e","newMessages","JSON","parse","data","prevMessages","concat","_toConsumableArray","current","scrollIntoView","behaviour","flexDirection","flexGrow","overflowY","map","ref","TextField","id","label","value","onChange","target","Button","onClick","send"],"sourceRoot":""}